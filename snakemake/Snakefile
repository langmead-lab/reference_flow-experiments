#/home-1/cnaechy1@jhu.edu/miniconda3/bin/python3.7
import os
import pandas as pd

configfile: "config.yaml"
# configfile: "config-pop_major.yaml"

''' Load from config '''
CHROM = config['CHROM']
INDIV = config['INDIV']
GROUP = config['GROUP']
NUM_SIM_READS = config['NUM_SIM_READS']
ALN_MAPQ_THRSD = config['ALN_MAPQ_THRSD']
POP_THRSD = config['POP_THRSD']
POP_STOCHASTIC = config['POP_STOCHASTIC']
POP_BLOCK_SIZE = config['POP_BLOCK_SIZE']
POP_USE_LD = config['POP_USE_LD']
DIR = config['DIR']
GENOME = config['GENOME']
VCF = config['VCF']
FAMILY = config['FAMILY']
SPOP = config['SPOP']
BCFTOOLS = config['BCFTOOLS']
MASON2 = config['MASON2']
LIFTOVER = config['LIFTOVER']
PYTHON = config['PYTHON']
DIR_SCRIPTS = config['DIR_SCRIPTS']
THREADS = config['THREADS']
RAND_SEED = config['RAND_SEED']
''''''

PREFIX_VCF_F = os.path.join(DIR, CHROM + '_filtered')

PREFIX_MAJOR_F = os.path.join(DIR, 'major/' + CHROM + '_filtered_major')
PREFIX_MAJOR = os.path.join(DIR, 'major/' + CHROM + '_h37maj')
PREFIX_MAJOR_IDX = os.path.join(DIR, 'major/indexes/' + CHROM + '_h37maj')
DIR_MAJOR = os.path.join(DIR, 'major/')

DIR_GRCH37 = os.path.join(DIR, 'grch37/')
DIR_GRCH37_IDX = os.path.join(DIR, 'grch37/indexes/')

DIR_PER = os.path.join(DIR, 'simulation/{INDIV}/')
DIR_PER_IDX = os.path.join(DIR, 'simulation/{INDIV}/indexes/')
PREFIX_PER = os.path.join(DIR, 'simulation/{INDIV}/' + CHROM + '-per')

DIR_POP_GENOME = os.path.join(DIR, 'pop_genome/')
POP_DIRNAME = 'thrds{0}_S{1}_b{2}_ld{3}'.format(POP_THRSD, POP_STOCHASTIC, POP_BLOCK_SIZE, POP_USE_LD)
# POP_DIRNAME = 'thrds{0}_S{1}_block{2}_ld{3}'.format(POP_THRSD, POP_STOCHASTIC, POP_BLOCK_SIZE, POP_USE_LD)
POP_GENOME_SUFFIX = \
    CHROM + '_superpop_{GROUP}_thrds' + str(POP_THRSD) + \
    '_S' + str(POP_STOCHASTIC) + '_b' + str(POP_BLOCK_SIZE) + \
    '_ld' + str(POP_USE_LD)
DIR_POP_GENOME_BLOCK = os.path.join(DIR_POP_GENOME, POP_DIRNAME + '/')
DIR_POP_GENOME_BLOCK_IDX = os.path.join(DIR_POP_GENOME_BLOCK, 'indexes/')

DIR_FIRST_PASS = os.path.join(DIR, 'experiments/{INDIV}/')
DIR_SECOND_PASS = os.path.join(DIR, 'experiments/{INDIV}/' + POP_DIRNAME)
PREFIX_SECOND_PASS = os.path.join(DIR_SECOND_PASS, CHROM + '-h37maj-' + ALN_MAPQ_THRSD + '-{GROUP}-' + POP_DIRNAME)

DIR_RESULTS = os.path.join(DIR, 'results/')

IDX_ITEMS = ['1', '2', '3', '4', 'rev.1', 'rev.2']

''' Included rules '''
#: Functions needed in the pipeline
include: 'shared/functions.Snakefile'

#: Build major allele ref and its indexes
#:      check: 'major.done', 'grch37.done'
include: 'shared/prepare_major_grch37.Snakefile'

#: Build personalized genomes and their indexes
#:      check: 'personalization.done'
include: 'shared/prepare_per.Snakefile'

#: Build personalized genomes and their indexes
#:      check: 'prepare_pop_genome.done'
include: 'shared/prepare_pop_genome.Snakefile'

#: Simulate reads from personalized genomes
#:      check: 'simulation.done'
include: 'shared/simulated_reads.Snakefile'

#: Align all reads to the refflow genomes (one-pass)
#:      check: 'rf_onepass_acc.done'
include: 'shared/align_refflow_onepass.Snakefile'

#: Align all reads to the standard genomes (one-pass)
#:      check: 'standard_onepass.done'
include: 'shared/align_standard_onepass.Snakefile'

#: Split reads by MAPQ and align low-quality reads to pop genomes
#:      check: 'refflow_secondpass.done'
include: 'shared/align_refflow.Snakefile'

#: Summarize all results into a tsv
#:      check: 'accuracy.done'
include: 'shared/write_results.Snakefile'

#: Liftover sams for major and refflow
#:      check: 'liftover.done', 'sorting.done'
include: 'shared/liftover.Snakefile'

#: Calculate allelic bias
#:      check: 'refbias.done'
include: 'shared/calc_refbias.Snakefile'

rule all:
    input:
        #: major allele ref index
        major = os.path.join(DIR, 'major.done'),
        grch37 = os.path.join(DIR, 'grch37.done'),
        #: personalized genomes
        per = os.path.join(DIR, 'personalization.done'),
        #: simulation profile
        sim = os.path.join(DIR, 'simulation.done'),
        #: indivs in populations
        popg = os.path.join(DIR, 'prepare_pop_genome.done'),
        #: first pass alignment
        std_onepass = os.path.join(DIR, 'standard_onepass.done'),
        #: refflow one pass
        # acc_rf_onepass = os.path.join(DIR, 'rf_onepass_acc.done'),
        #: second pass alignment
        secondpass = os.path.join(DIR, 'refflow_secondpass.done'),
        #: liftover and sorting
        lft = os.path.join(DIR, 'liftover.done'),
        sort = os.path.join(DIR, 'sorting.done'),
        #: refbias
        refbias = os.path.join(DIR, 'refbias.done'),
        #: accuracy
        acc = os.path.join(DIR, 'accuracy.done'),
        tsv = os.path.join(DIR_RESULTS, 'all.tsv')
    run:
        sys.stderr.write('complete\n')

rule filter_vcf:
    input:
        vcf = VCF
    output:
        vcf = PREFIX_VCF_F + '.vcf'
    shell:
        '{BCFTOOLS} view --threads {THREADS} -V mnps,other {input.vcf} > {output.vcf}'

rule merge_per:
    input:
        samA = DIR_FIRST_PASS + CHROM + '-per_hapA.sam',
        samB = DIR_FIRST_PASS + CHROM + '-per_hapB.sam'
    output:
        path = os.path.join(DIR_FIRST_PASS, '{}-per.paths'.format(CHROM)),
        id = os.path.join(DIR_FIRST_PASS, '{}-per.ids'.format(CHROM)),
        merge_paths = os.path.join(DIR_FIRST_PASS, '{}-per.merge_paths'.format(CHROM)),
        samA = os.path.join(DIR_FIRST_PASS, '{}-per-merged-hapA.sam'.format(CHROM)),
        samB = os.path.join(DIR_FIRST_PASS, '{}-per-merged-hapB.sam'.format(CHROM))
    params:
        os.path.join(DIR_FIRST_PASS, '{}-per-merged'.format(CHROM))
    run:
        #: prepare ids
        for h in ['hapA', 'hapB']:
            shell('echo {h} >> {output.id};')
        #: prepare paths
        shell('ls {input.samA} >> {output.path};')
        shell('ls {input.samB} >> {output.path};')
        #: merge_incremental
        shell('{PYTHON} {DIR_SCRIPTS}/merge_incremental.py -ns {output.path} \
            -ids {output.id} -rs {RAND_SEED} -p {params} \
            -l {output.merge_paths};')

rule calc_per_accuracy:
    input:
        gold = PREFIX_PER + '_1.sam',
        var_reads = PREFIX_PER + '.var',
        merge_paths = os.path.join(DIR_FIRST_PASS, '{}-per.merge_paths'.format(CHROM))
    output:
        acc_log = os.path.join(DIR_FIRST_PASS, CHROM + '-per.acc_log'),
        acc = os.path.join(DIR_RESULTS, '{INDIV}-' + CHROM + '-per.acc')
    run:
        with open(input.merge_paths, 'r') as f:
            for line in f:
                fn = line.rstrip()
                shell('{PYTHON} -O {DIR_SCRIPTS}/analyze_diploid_indels.py \
                -c {CHROM} -g {input.gold} -p 2 -vr {input.var_reads} \
                -vs {input.var_reads} -n {fn} >> {output.acc_log}')
        organize_accuracy(output.acc_log, output.acc)

#: ---- OLD MERGING
# rule personalize_merge_and_calc_accuracy:
#     input:
#         samA = DIR_FIRST_PASS + CHROM + '-per_hapA.sam',
#         samB = DIR_FIRST_PASS + CHROM + '-per_hapB.sam',
#         gold = PREFIX_PER + '_1.sam',
#         var_reads = PREFIX_PER + '.var',
#     output:
#         merge_path = os.path.join(DIR_FIRST_PASS, CHROM + '-per-merged.paths'),
#         acc_log = os.path.join(DIR_FIRST_PASS, CHROM + '-per.acc_log'),
#         acc = os.path.join(DIR_RESULTS, '{INDIV}-' + CHROM + '-per.acc')
#     run:
#         shell('{PYTHON} {DIR_SCRIPTS}/merge_sam.py \
#             -n1 {input.samA} -id1 hapA \
#             -n2 {input.samB} -id2 hapB \
#             -rs 0 -l {output.merge_path};')
#         with open(output.merge_path, 'r') as f:
#             for line in f:
#                 fn = line.rstrip()
#                 shell('{PYTHON} -O {DIR_SCRIPTS}/analyze_diploid_indels.py \
#                 -c {CHROM} -g {input.gold} -p 2 -vr {input.var_reads} \
#                 -vs {input.var_reads} -n {fn} >> {output.acc_log}')
#         organize_accuracy(output.acc_log, output.acc)
#: ----

rule calc_major_accuracy:
    input:
        sam = os.path.join(DIR_FIRST_PASS, CHROM + '-h37maj.sam'),
        var_genome = PREFIX_MAJOR + '.var',
        gold = PREFIX_PER + '_1.sam',
        var_reads = PREFIX_PER + '.var',
    output:
        acc_log = os.path.join(DIR_FIRST_PASS, CHROM + '-h37maj.acc_log'),
        acc = os.path.join(DIR_RESULTS, '{INDIV}-' + CHROM + '-h37maj.acc')
    run:
        shell('{PYTHON} -O {DIR_SCRIPTS}/analyze_diploid_indels.py \
        -c {CHROM} -g {input.gold} -p 0 -vr {input.var_reads} \
        -vs {input.var_genome} -n {input.sam} > {output.acc_log};')
        organize_accuracy(output.acc_log, output.acc)

rule check_major_and_per_accuracy:
    input:
        expand(
            os.path.join(DIR_RESULTS, '{INDIV}-' + CHROM + '-h37maj.acc'),
            INDIV = INDIV),
        expand(
            os.path.join(DIR_RESULTS, '{INDIV}-' + CHROM + '-per.acc'),
            INDIV = INDIV),
    output:
        touch(temp(os.path.join(DIR, '{INDIV}_onepass_acc.done')))

rule calc_refflow_firstpass_accuracy:
    input:
        gold = PREFIX_PER + '_1.sam',
        var_reads = PREFIX_PER + '.var',
        first_sam = os.path.join(DIR_FIRST_PASS, CHROM + 
            '-h37maj-mapqgeq' + ALN_MAPQ_THRSD + '.sam'),
        first_var_genome = PREFIX_MAJOR + '.var',
    output:
        acc_log = os.path.join(DIR_FIRST_PASS, '{0}-{1}-{2}-firstpass.acc_log'.format(CHROM, ALN_MAPQ_THRSD, POP_DIRNAME))
    shell:
        '{PYTHON} -O {DIR_SCRIPTS}/analyze_diploid_indels.py \
        -c {CHROM} -g {input.gold} -p 0 -vr {input.var_reads} \
        -vs {input.first_var_genome} -n {input.first_sam} >> \
        {output.acc_log}'

rule calc_refflow_accuracy:
    input:
        gold = PREFIX_PER + '_1.sam',
        var_reads = PREFIX_PER + '.var',
        # first_sam = os.path.join(DIR_FIRST_PASS, CHROM + 
        #     '-h37maj-mapqgeq' + ALN_MAPQ_THRSD + '.sam'),
        first_var_genome = PREFIX_MAJOR + '.var',
        acc_log = os.path.join(DIR_FIRST_PASS, '{0}-{1}-{2}-firstpass.acc_log'.format(CHROM, ALN_MAPQ_THRSD, POP_DIRNAME)),
        second_sam_path = os.path.join(DIR_SECOND_PASS, '{0}-h37maj-{1}-{2}.merge_paths'.format(CHROM, ALN_MAPQ_THRSD, POP_DIRNAME)),
        second_group = os.path.join(DIR_SECOND_PASS, '{0}-h37maj-{1}-{2}.ids'.format(CHROM, ALN_MAPQ_THRSD, POP_DIRNAME)),
        second_var_genome = expand(
            os.path.join(
            DIR_POP_GENOME_BLOCK,
            CHROM + '_superpop_{GROUP}_' + POP_DIRNAME + '.var'),
            # CHROM + '_superpop_{GROUP}_thrds' + str(POP_THRSD) +
            # '_S' + str(POP_STOCHASTIC) + '_b' + str(POP_BLOCK_SIZE) + 
            # '_ld' + str(POP_USE_LD) + '.var'),
            INDIV = INDIV, GROUP = GROUP
        )
    output:
        acc_log = os.path.join(DIR_FIRST_PASS, '{0}-{1}-{2}.acc_log'.format(CHROM, ALN_MAPQ_THRSD, POP_DIRNAME))
    run:
        # if os.path.exists(output.acc_log):
        #     shell('rm {output.acc_log};')
        # shell(
        #     '{PYTHON} -O {DIR_SCRIPTS}/analyze_diploid_indels.py \
        #     -c {CHROM} -g {input.gold} -p 0 -vr {input.var_reads} \
        #     -vs {input.first_var_genome} -n {input.first_sam} >> \
        #     {output.acc_log};')
        shell('cp {input.acc_log} {output.acc_log};')
        list_group = []
        with open(input.second_group) as f:
            for line in f:
                list_group.append(line.rstrip())
        list_fn = []
        with open(input.second_sam_path) as f:
            for line in f:
                list_fn.append(line.rstrip())
        for i, fn in enumerate(list_fn):
            if i == 0:
                second_var_genome = input.first_var_genome
            else:
                second_var_genome = os.path.join(
                    DIR_POP_GENOME_BLOCK,
                    CHROM + '_superpop_' + list_group[i] + '_' + POP_DIRNAME + '.var'
                )
            shell('{PYTHON} -O {DIR_SCRIPTS}/analyze_diploid_indels.py \
            -c {CHROM} -g {input.gold} -p 0 -vr {input.var_reads} \
            -vs {second_var_genome} -n {fn} >> \
            {output.acc_log};')

rule sum_refflow_accuracy:
    input:
        acc_log = os.path.join(DIR_FIRST_PASS, '{0}-{1}-{2}.acc_log'.format(CHROM, ALN_MAPQ_THRSD, POP_DIRNAME))
    output:
        acc = os.path.join(DIR_RESULTS,
            '{INDIV}' + '-{0}-h37maj-{1}-{2}.acc'.format(CHROM, ALN_MAPQ_THRSD, POP_DIRNAME))
    run:
        organize_accuracy(input.acc_log, output.acc)
