import os
import pandas as pd

# configfile: 'test.yaml'
configfile: 'config_local.yaml' # local whole genome experiment using paired-end data
# configfile: 'exp_sim_local.yaml'
# configfile: "config.yaml"
# configfile: "config_mouse.yaml"

''' Load from config '''
IF_REAL_DATA = config['IF_REAL_DATA']
CHROM = config['CHROM']
INDIV = config['INDIV']
EXP_LABEL = config['EXP_LABEL']
READS1 = config['READS1']
READS2 = config['READS2']
GROUP = config['GROUP']
ALN_MAPQ_THRSD = config['ALN_MAPQ_THRSD']
POP_THRSD = config['POP_THRSD']
POP_STOCHASTIC = config['POP_STOCHASTIC']
POP_BLOCK_SIZE = config['POP_BLOCK_SIZE']
POP_USE_LD = config['POP_USE_LD']

USE_PREBUILT = config['USE_PREBUILT']
SORT_SAM = config['SORT_SAM']

DIR = config['DIR']
GENOME = config['GENOME']
DIR_VCF = config['DIR_VCF']
VCF_PREFIX = config['VCF_PREFIX']
VCF_SUFFIX = config['VCF_SUFFIX']
CHR_PREFIX = config['CHR_PREFIX']
LENGTH_MAP = config['LENGTH_MAP']
CHROM_MAP = config['CHROM_MAP']

FAMILY = config['FAMILY']
SPOP = config['SPOP']
BCFTOOLS = config['BCFTOOLS']
SAMTOOLS = config['SAMTOOLS']
LIFTOVER = config['LIFTOVER']
PYTHON = config['PYTHON']
DIR_SCRIPTS = config['DIR_SCRIPTS']

THREADS = config['THREADS']
RAND_SEED = config['RAND_SEED']

# Experiments
EXP = True
# EXP = False

#### Below args are only used in experiments
if EXP:
    BIAS_MIN_READ_COUNT = config['BIAS_MIN_READ_COUNT']
    BIAS_TAIL_THRDS = config['BIAS_TAIL_THRDS']
    BEDTOOLS = config['BEDTOOLS']
    DIR_SCRIPTS_EXP = config['DIR_SCRIPTS_EXP']
    ALLELE_FREQ_FOR_VG = config['ALLELE_FREQ_FOR_VG']
    TIME = config['TIME']
    VG = config['VG']
''''''

# Bowtie 2 index extensions
IDX_ITEMS = ['1', '2', '3', '4', 'rev.1', 'rev.2']

# Prefixes and directory paths for major-allele reference contruction and indexing
PREFIX_MAJOR_F = os.path.join(DIR, 'major/{CHROM}_filtered_major')
PREFIX_MAJOR = os.path.join(DIR, 'major/chr{CHROM}_maj')
DIR_MAJOR = os.path.join(DIR, 'major')

# Prefixes and directory paths for population reference contruction and indexing
DIR_POP_GENOME = os.path.join(DIR, 'pop_genome/')
POP_DIRNAME = 'thrds{0}_S{1}_b{2}_ld{3}'.format(POP_THRSD, POP_STOCHASTIC, POP_BLOCK_SIZE, POP_USE_LD)
# POP_GENOME_SUFFIX = \
#     'chr{CHROM}-superpop_{GROUP}_thrds' + str(POP_THRSD) + \
#     '_S' + str(POP_STOCHASTIC) + '_b' + str(POP_BLOCK_SIZE) + \
#     '_ld' + str(POP_USE_LD)
# WG_POP_GENOME_SUFFIX = \
#     EXP_LABEL + '-superpop_{GROUP}_thrds' + str(POP_THRSD) + \
#     '_S' + str(POP_STOCHASTIC) + '_b' + str(POP_BLOCK_SIZE) + \
#     '_ld' + str(POP_USE_LD)
WG_POP_GENOME_SUFFIX = \
    EXP_LABEL + '-superpop_{GROUP}_' + POP_DIRNAME
DIR_POP_GENOME_BLOCK = os.path.join(DIR_POP_GENOME, POP_DIRNAME + '/')
DIR_POP_GENOME_BLOCK_IDX = os.path.join(DIR_POP_GENOME_BLOCK, 'indexes/')

# Prefix and directory paths for experiments
DIR_FIRST_PASS = os.path.join(DIR, 'experiments/{INDIV}/')
DIR_SECOND_PASS = os.path.join(DIR, 'experiments/{INDIV}/' + POP_DIRNAME)
PREFIX_SECOND_PASS = os.path.join(DIR_SECOND_PASS, EXP_LABEL + '-major-' + ALN_MAPQ_THRSD + '-{GROUP}-' + POP_DIRNAME)

# Bias results directory
DIR_RESULTS = os.path.join(DIR, 'results')
DIR_RESULTS_BIAS = os.path.join(DIR, 'results/bias')
DIR_VG = os.path.join(DIR, 'vg/')

''' Snakemake modules '''
if EXP:
    DIR_PER = os.path.join(DIR, 'personalized/{INDIV}/')
    PREFIX_PER = os.path.join(DIR_PER, EXP_LABEL)
    if not IF_REAL_DATA:
        READS1 = PREFIX_PER + '_1.fq'
        READS2 = PREFIX_PER + '_2.fq'
        include: 'experiments/calc_mapping_acc.Snakefile'
    include: 'experiments/prepare_per_and_grc.Snakefile'
    include: 'experiments/evaluate_bias.Snakefile'
    include: 'experiments/alignment.Snakefile'
    include: 'experiments/exp_shared.Snakefile'
    # include: 'experiments/vg.Snakefile'
    # include: 'experiments/variant_calling.Snakefile'

# Functions
include: '../reference_flow/snakemake/shared/functions.Snakefile'

if not USE_PREBUILT:
    # Prepare pop genome and indexes
    #      check: 'prepare_pop_genome.done'
    include: '../reference_flow/snakemake/shared/prepare_pop_genome.Snakefile'
    
    # Prepare grc and major genome and indexes
    #      check: 'prepare_standard_genome.done'
    include: '../reference_flow/snakemake/shared/prepare_standard_genome.Snakefile'

# Align reads to grch major, reference flow, personalized genomes
#      check: 'alignment_refflow.done'
include: '../reference_flow/snakemake/shared/alignment.Snakefile'

# Elevate and sort reads
#      check: 'elevate.done', 'sort.done'
include: '../reference_flow/snakemake/shared/elevate_and_sort.Snakefile'

TODO_LIST = ['alignment_refflow.done', 'elevate.done']
if not USE_PREBUILT:
    TODO_LIST.append('prepare_pop_genome.done')
    TODO_LIST.append('prepare_standard_genome.done')
if SORT_SAM:
    TODO_LIST.append('sort.done')

if EXP:
    TODO_LIST.append('prepare_per.done')
    TODO_LIST.append('bias_exp.done')
    TODO_LIST.append('alignment_grc_per.done')
#     TODO_LIST.append('vg_index.done')
#     TODO_LIST.append('vg_map.done')
#     TODO_LIST.append(os.path.join(DIR_RESULTS, 'all.tsv'))
    TODO_LIST.append('bias_exp.done')
# TODO_LIST.append('var_calling.done')

''' Snakemake rules '''
rule all:
    input:
        expand(os.path.join(DIR, '{task}'), task = TODO_LIST),

rule filter_vcf:
    input:
        vcf = os.path.join(DIR_VCF, VCF_PREFIX + '{CHROM}' + VCF_SUFFIX),
        chrom_map = CHROM_MAP
    output:
        vcf = temp(os.path.join(DIR, '{CHROM}_filtered.vcf'))
    shell:
        # Take PASS variants
        # Does not remove mnps, since they will be needed for constructing personalized reference genome, 
        # and will be removed when building major and refflow references.
        '{BCFTOOLS} view -r {wildcards.CHROM} -c 1 -f PASS {input.vcf} | {BCFTOOLS} annotate --rename-chrs {input.chrom_map} -o {output.vcf}'
        # '{BCFTOOLS} view -r {wildcards.CHROM} -c 1 -f PASS -V mnps,other {input.vcf} | {BCFTOOLS} annotate --rename-chrs {input.chrom_map} -o {output.vcf}'

rule aggregate_vcf:
    input:
        vcf = expand(os.path.join(DIR, '{CHROM}_filtered.vcf'), CHROM = CHROM)
    output:
        vcf = os.path.join(DIR, EXP_LABEL + '_filtered.vcf')
    shell:
        '{BCFTOOLS} concat -o {output.vcf} {input.vcf}'
