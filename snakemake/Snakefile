#/home-1/cnaechy1@jhu.edu/miniconda3/bin/python3.7
import os
import pandas as pd

configfile: "config.yaml"
# configfile: "deep.yaml"
# configfile: "deep_100.yaml"

''' Load from config '''
CHROM = config['CHROM']
INDIV = config['INDIV']
GROUP = config['GROUP']
NUM_SIM_READS = config['NUM_SIM_READS']
ALN_MAPQ_THRSD = config['ALN_MAPQ_THRSD']
POP_THRSD = config['POP_THRSD']
POP_STOCHASTIC = config['POP_STOCHASTIC']
POP_BLOCK_SIZE = config['POP_BLOCK_SIZE']
POP_USE_LD = config['POP_USE_LD']
BIAS_MIN_READ_COUNT = config['BIAS_MIN_READ_COUNT']
BIAS_TAIL_THRDS = config['BIAS_TAIL_THRDS']
DIR = config['DIR']
GENOME = config['GENOME']
VCF = config['VCF']
FAMILY = config['FAMILY']
SPOP = config['SPOP']
BCFTOOLS = config['BCFTOOLS']
MASON2 = config['MASON2']
LIFTOVER = config['LIFTOVER']
PYTHON = config['PYTHON']
DIR_SCRIPTS = config['DIR_SCRIPTS']
ALLELE_FREQ_FOR_VG = config['ALLELE_FREQ_FOR_VG']
VG = config['VG']
TIME = config['TIME']
THREADS = config['THREADS']
MAX_SYSTEM_THREADS = config['MAX_SYSTEM_THREADS']
RAND_SEED = config['RAND_SEED']
''''''

PREFIX_VCF_F = os.path.join(DIR, CHROM + '_filtered')

PREFIX_MAJOR_F = os.path.join(DIR, 'major/' + CHROM + '_filtered_major')
PREFIX_MAJOR = os.path.join(DIR, 'major/' + CHROM + '_h37maj')
PREFIX_MAJOR_IDX = os.path.join(DIR, 'major/indexes/' + CHROM + '_h37maj')
DIR_MAJOR = os.path.join(DIR, 'major/')

DIR_GRCH37 = os.path.join(DIR, 'grch37/')
DIR_GRCH37_IDX = os.path.join(DIR, 'grch37/indexes/')

DIR_PER = os.path.join(DIR, 'simulation/{INDIV}/')
DIR_PER_IDX = os.path.join(DIR, 'simulation/{INDIV}/indexes/')
PREFIX_PER = os.path.join(DIR, 'simulation/{INDIV}/' + CHROM + '-per')

DIR_VG = os.path.join(DIR, 'vg/')
DIR_VG_TMP = os.path.join(DIR, 'vg/tmp/')

DIR_POP_GENOME = os.path.join(DIR, 'pop_genome/')
POP_DIRNAME = 'thrds{0}_S{1}_b{2}_ld{3}'.format(POP_THRSD, POP_STOCHASTIC, POP_BLOCK_SIZE, POP_USE_LD)
# POP_DIRNAME = 'thrds{0}_S{1}_block{2}_ld{3}'.format(POP_THRSD, POP_STOCHASTIC, POP_BLOCK_SIZE, POP_USE_LD)
POP_GENOME_SUFFIX = \
    CHROM + '_superpop_{GROUP}_thrds' + str(POP_THRSD) + \
    '_S' + str(POP_STOCHASTIC) + '_b' + str(POP_BLOCK_SIZE) + \
    '_ld' + str(POP_USE_LD)
DIR_POP_GENOME_BLOCK = os.path.join(DIR_POP_GENOME, POP_DIRNAME + '/')
DIR_POP_GENOME_BLOCK_IDX = os.path.join(DIR_POP_GENOME_BLOCK, 'indexes/')

DIR_FIRST_PASS = os.path.join(DIR, 'experiments/{INDIV}/')
DIR_SECOND_PASS = os.path.join(DIR, 'experiments/{INDIV}/' + POP_DIRNAME)
PREFIX_SECOND_PASS = os.path.join(DIR_SECOND_PASS, CHROM + '-h37maj-' + ALN_MAPQ_THRSD + '-{GROUP}-' + POP_DIRNAME)

DIR_RESULTS = os.path.join(DIR, 'results/')
DIR_RESULTS_BIAS = os.path.join(DIR, 'results/bias/')

IDX_ITEMS = ['1', '2', '3', '4', 'rev.1', 'rev.2']

''' Included rules '''
#: Functions needed in the pipeline
include: 'shared/functions.Snakefile'

#: Build major allele ref and its indexes
#:      check: 'major.done', 'grch37.done', 'personalization.done'
include: 'shared/prepare_major_grch37.Snakefile'

# #: Build personalized genomes and their indexes
# #:      check: 'personalization.done'
# include: 'shared/prepare_per.Snakefile'

#: Build personalized genomes and their indexes
#:      check: 'prepare_pop_genome.done'
include: 'shared/prepare_pop_genome.Snakefile'

#: Simulate reads from personalized genomes
#:      check: 'simulation.done'
include: 'shared/simulated_reads.Snakefile'

#: Align all reads to the refflow genomes (one-pass)
#:      check: 'rf_onepass_acc.done'
include: 'shared/align_refflow_onepass.Snakefile'

#: Align all reads to the standard genomes (one-pass)
#:      check: 'standard_onepass.done'
include: 'shared/align_standard_onepass.Snakefile'

#: Split reads by MAPQ and align low-quality reads to pop genomes
#:      check: 'refflow_secondpass.done'
include: 'shared/align_refflow.Snakefile'

#: graph aligners
#:      vg: build graphs for vg and align reads to it
#:      check: 'vg_index.done', 'vg_map.done'
include: 'shared/graph_alignment.Snakefile'

#: Liftover sams for major and refflow
#:      check: 'liftover.done', 'sorting.done'
include: 'shared/liftover.Snakefile'

#: Calculate allelic bias
#:      check: 'refbias.done', 'find_biased_reads.done'
include: 'shared/calc_refbias.Snakefile'

#: Calculate mapping accuracy and
#: summarize all results into a tsv
#:      check: 'accuracy.done'
include: 'shared/calc_mapping_acc.Snakefile'

rule all:
    input:
        #: major allele ref index
        major = os.path.join(DIR, 'major.done'),
        grch37 = os.path.join(DIR, 'grch37.done'),
        #: personalized genomes
        per = os.path.join(DIR, 'personalization.done'),
        #: simulation profile
        sim = os.path.join(DIR, 'simulation.done'),
        #: indivs in populations
        popg = os.path.join(DIR, 'prepare_pop_genome.done'),
        #: first pass alignment
        # std_onepass = os.path.join(DIR, 'standard_onepass.done'),
        # #: refflow one pass
        # # acc_rf_onepass = os.path.join(DIR, 'rf_onepass_acc.done'),
        # #: second pass alignment
        # secondpass = os.path.join(DIR, 'refflow_secondpass.done'),
        # #: liftover and sorting
        lft = os.path.join(DIR, 'liftover.done'),
        sort = os.path.join(DIR, 'sorting.done'),
        #: graph aligner
        vg_index = os.path.join(DIR, 'vg_index.done'),
        vg_map = os.path.join(DIR, 'vg_map.done'),
        vg_acc = os.path.join(DIR, 'vg_acc.done'),
        # #: refbias
        refbias = os.path.join(DIR, 'refbias.done'),
        # find_biased_reads = os.path.join(DIR, 'find_biased_reads.done'),
        #: accuracy
        acc = os.path.join(DIR, 'accuracy.done'),
        tsv = os.path.join(DIR_RESULTS, 'all.tsv')
    run:
        sys.stderr.write('complete\n')

rule filter_vcf:
    input:
        vcf = VCF
    output:
        vcf = PREFIX_VCF_F + '.vcf'
    threads: THREADS
    shell:
        '{BCFTOOLS} view --threads {THREADS} -V mnps,other {input.vcf} > {output.vcf}'

